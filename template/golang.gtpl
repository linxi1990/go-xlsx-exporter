// DO NOT EDIT!
// This code is auto generated by go-xlsx-exporter
// VERSION {{.Version}}
// go-protobuf {{.GoProtoVersion}}

package {{.Package}}

import (
	reflect "reflect"
	sync "sync"	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	{{- if .HasMessage}} 
	"fmt"	
	"google.golang.org/protobuf/proto"
	{{- end}}

	{{- range .Info.Imports}}
	{{.}}
	{{- end}}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

{{- $G := .}}
{{- $TypeDescPrefix := join .Package "."}}
{{- $innerVarPrefix := join "file_" .FileName "_proto"}}
{{- $outterVarPrefix := upperF $innerVarPrefix}}

{{- /*生成枚举类型*/}}
{{range $index,$item := .Enums}}
// Defined in table: {{.DefinedTable}}
type {{$item.TypeName}} int32
const ( {{range .Items}}
    {{$item.TypeName}}_{{.TitleFieldName}} {{$item.TypeName}} = {{.Value}} {{if ne .Desc ""}} //{{.Desc}} {{end -}}
  {{end}}
)

var (
    {{$item.TypeName}}_name = map[int32]string{
	{{range .Items -}}
        {{.Value}}:"{{.TitleFieldName}}",
    {{end -}}
    }

    {{$item.TypeName}}_value = map[string]int32{
    {{range .Items -}}
        "{{.TitleFieldName}}":{{.Value}},
    {{end -}}
    }
)

func (x {{$item.TypeName}}) Enum() *{{$item.TypeName}} {
	p := new({{$item.TypeName}})
	*p = x
	return p
}

func (x {{$item.TypeName}}) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func ({{$item.TypeName}}) Descriptor() protoreflect.EnumDescriptor {
	return {{$innerVarPrefix}}_enumTypes[{{$index}}].Descriptor()
}

func ({{$item.TypeName}}) Type() protoreflect.EnumType {
	return &{{$innerVarPrefix}}_enumTypes[{{$index}}]
}

func (x {{$item.TypeName}}) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use {{$item.TypeName}}.Descriptor instead.
func ({{$item.TypeName}}) EnumDescriptor() ([]byte, []int) {
	return {{$innerVarPrefix}}_rawDescGZIP(), []int{ {{- $index -}} }
}

{{- /*生成枚举类型结束*/}}
{{end}}

{{- /*基类*/}}
/* type ConvertHandler func (field string, value interface{}) interface{}

type MessageBase struct {
	
}

func (item *MessageBase) GetConvertData(field string, value interface{}) {

} */

{{- /*生成类类型*/}}
{{- range $index,$item := .Tables}}
// Defined in table: {{.DefinedTable}}
type {{.TypeName}} struct { 
    state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
{{range .Headers}}    
    {{- $typeDesc := ""}}
	{{- $fieldTag := "opt"}}
    {{- if .IsEnum}} {{$typeDesc = join ",enum=" $TypeDescPrefix .ValueType}}{{end}}    
	{{- $arratDesc := ""}}
	{{- if .IsArray}} 
		{{- $fieldTag = "rep"}}
		{{- if .IsStruct}} 
			{{- $arratDesc = "[]*"}} 
		{{- else}} 
			{{- $arratDesc = "[]"}} 
		{{- end}} 
	{{- end}}
	{{- if not .IsVoid}}
    {{.TitleFieldName}} {{$arratDesc}}{{.ValueType}} `protobuf:"{{.EncodeType}},{{.Index}},{{$fieldTag}},name={{.FieldName}},proto3{{$typeDesc}}" json:"{{.FieldName}},omitempty"` {{if ne .Desc ""}} //{{.Desc}} {{end}}
    {{end -}}
	{{- space -}}
{{end}}
}

func (x *{{.TypeName}}) Reset() {
	*x = {{.TypeName}}{}
	if protoimpl.UnsafeEnabled {
		mi := &{{$innerVarPrefix}}_msgTypes[{{$index}}]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *{{.TypeName}}) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*{{.TypeName}}) ProtoMessage() {}

func (x *{{.TypeName}}) ProtoReflect() protoreflect.Message {
	mi := &{{$innerVarPrefix}}_msgTypes[{{$index}}]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use {{.TypeName}}.ProtoReflect.Descriptor instead.
func (*{{.TypeName}}) Descriptor() ([]byte, []int) {
	return {{$innerVarPrefix}}_rawDescGZIP(), []int{ {{- $index -}} }
}

{{- /*生成属性get方法*/}}
{{range .Headers}}
{{- $returnType := .ValueType}}
{{- if .IsArray}}	
	{{- $arratDesc := ""}}
 	{{- if .IsArray}} {{if .IsStruct}} {{$arratDesc = "[]*"}} {{else}} {{$arratDesc = "[]"}} {{end}} {{end}}
	{{- $returnType = join $arratDesc $returnType}} 
{{- end}}
{{- if not .IsVoid}}
func (x *{{$item.TypeName}}) Get{{.TitleFieldName}}() {{$returnType}} {
	if x != nil {
		return x.{{.TitleFieldName}}
	}
	return {{default .}}
}
{{end -}}
{{end}}

{{- /*生成类类型结束*/}}
{{end}}

{{- /*生成文件信息*/}}
var {{$outterVarPrefix}} protoreflect.FileDescriptor

var {{$innerVarPrefix}}_rawDesc = []byte{
{{.FileRawDesc}}
}

var (
	{{$innerVarPrefix}}_rawDescOnce sync.Once
	{{$innerVarPrefix}}_rawDescData = {{$innerVarPrefix}}_rawDesc
)

func {{$innerVarPrefix}}_rawDescGZIP() []byte {
	{{$innerVarPrefix}}_rawDescOnce.Do(func() {
		{{$innerVarPrefix}}_rawDescData = protoimpl.X.CompressGZIP({{$innerVarPrefix}}_rawDescData)
	})
	return {{$innerVarPrefix}}_rawDescData
}

var {{$innerVarPrefix}}_enumTypes = make([]protoimpl.EnumInfo, {{len .Enums}})
var {{$innerVarPrefix}}_msgTypes = make([]protoimpl.MessageInfo, {{len .Tables}})
var {{$innerVarPrefix}}_goTypes = []interface{}{
	{{$typeCount := 0}}
	{{- range .Enums}}	
	{{- space -}}
	({{.TypeName}})(0),				// {{$typeCount}}: {{$G.Package}}.{{.TypeName}}
	{{- $typeCount = add $typeCount 1}}
	{{end}}
	{{- range .Tables}}
	{{- space -}}
	(*{{.TypeName}})(nil),				// {{$typeCount}}: {{$G.Package}}.{{.TypeName}}
	{{- $typeCount = add $typeCount 1}}
	{{end}}
}

var {{$innerVarPrefix}}_depIdxs = []int32{
	{{.DepIdexs}}
}

func {{$innerVarPrefix}}_init() {
	if {{$outterVarPrefix}} != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		{{- $msgCount := 0}}
		{{- range .Tables}}
		{{$innerVarPrefix}}_msgTypes[{{$msgCount}}].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*{{.TypeName}}); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		{{- $msgCount = add $msgCount 1}}
		{{end}}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: {{$innerVarPrefix}}_rawDesc,
			NumEnums:      {{len .Enums}},
			NumMessages:   {{len .Tables}},
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           {{$innerVarPrefix}}_goTypes,
		DependencyIndexes: {{$innerVarPrefix}}_depIdxs,
		EnumInfos:         {{$innerVarPrefix}}_enumTypes,
		MessageInfos:      {{$innerVarPrefix}}_msgTypes,
	}.Build()
	{{$outterVarPrefix}} = out.File
	{{$innerVarPrefix}}_rawDesc = nil
	{{$innerVarPrefix}}_goTypes = nil
	{{$innerVarPrefix}}_depIdxs = nil
}

{{- if .HasMessage}}    
// regist all messages
var Messages = make(map[int] reflect.Type)
func {{$innerVarPrefix}}_regist() {
	{{- range .Tables}}
		{{- if is_message_table .TableType}}
			{{- if gt .Id 0}}
	Messages[{{.Id}}] = reflect.TypeOf({{.TypeName}}{})
			{{- end}}
		{{- end}}
	{{- end}}  
}

func CreateMessage(id int) protoreflect.ProtoMessage {
	tp, ok := Messages[id]
	if !ok {
		return nil
	}

	return reflect.New(tp).Interface().(protoreflect.ProtoMessage)
}

func LoadMessage(id int, data []byte) (error, protoreflect.ProtoMessage) {
	msg := CreateMessage(id)
	if msg == nil {
		return fmt.Errorf("message %d not found", id), nil
	}

	err := proto.Unmarshal(data, msg)
	if err != nil {
		return err, nil
	}
	return nil, msg
}
{{- end}}

func init() { 
	{{$innerVarPrefix}}_init()
	{{- if .HasMessage}} 
	{{$innerVarPrefix}}_regist()
	{{- end}}
}