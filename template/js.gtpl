// DO NOT EDIT!
// This code is auto generated by go-xlsx-exporter
// VERSION {{.Version}}
// go-protobuf {{.GoProtoVersion}}

{{- $G := .}}
{{- $NS := .Namespace}}

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = protobuf.Reader, $Writer = protobuf.Writer, $util = protobuf.util;

// Exported root namespace
var $root = protobuf.roots["default"] || (protobuf.roots["default"] = {});

$root.{{$NS}} = (function() {
    /**
     * Namespace {{$NS}}.
     * @exports {{$NS}}
     * @namespace
     */
    var {{$NS}} = {};

    {{/*生成枚举类型*/}}
    {{- range .Enums}}
    // Defined in table: {{.DefinedTable}}
    var {{.TypeName}} = {{$NS}}.{{.TypeName}} = (function() {
        var valuesById = {}, values = Object.create(valuesById);
    {{range .Items}}
        {{if ne .Desc ""}} //{{.Desc}} {{end}}
        values[valuesById[{{.Index}}] = "{{.FieldName}}"] = {{.Value}};
    {{end}}
        return values;
    })();
    {{end}}

    {{- /*生成配置类类型*/}}
    {{- range .Consts}}
    // Defined in table: {{.DefinedTable}}
    var {{.TypeName}} = {{$NS}}.{{.TypeName}} = (function() {
        var values = Object.create(valuesById);
    {{range .Items}}
    {{- if not .IsVoid }}
        {{if ne .Desc ""}} //{{.Desc}} {{end}}
        values.{{.FieldName}} = {{value_format .Value .}};
    {{- end}}
        {{- if .Convertable}}
        
        {{- end}}
    {{end}}
        return values;
    })();
    {{end}}

    {{- /*生成类类型*/}}

    {{- range .Tables}}
    {{$TypeName := .TypeName}}
    // Defined in table: {{.DefinedTable}}
     var {{$TypeName}} = {{$NS}}.{{$TypeName}} = (function(properties) {
        {{range .Headers}}
    {{- if not .IsVoid }}
        {{- if .IsArray}}
        this.{{.FieldName}} = [];
        {{end -}}
    {{end -}}     
    {{end}}        
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    })();

    {{range .Headers}}
        {{- if not .IsVoid }}
            {{- if .IsArray}}
                {{- if ne .Desc ""}} //{{.Desc}} {{end}}
    {{$TypeName}}.prototype.{{.FieldName}} =  $util.emptyArray;
            {{else}}
    {{$TypeName}}.prototype.{{.FieldName}} =  {{default .}};
            {{end -}}   
        {{end -}} 
    {{end -}} 

    {{$TypeName}}.create = function create(properties) {
        return new {{$TypeName}}(properties);
    };

    {{$TypeName}}.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();

        {{range .Headers}}        
            {{$wireType := wireType .}}
            {{$count := calcOffset .}}

            {{- if not .IsVoid }}
                {{- if .IsArray}}
                    {{- if ne .Desc ""}} //{{.Desc}} {{end}}
        if (message.{{.FieldName}} != null && message.{{.FieldName}}.length) {
            writer.uint32(/* id {{add .Index 1}}, wireType {{$wireType}} =*/{{$count}}).fork();
            for (var i = 0; i < message.TaskItem.length; ++i)
                writer.uint32(message.TaskItem[i]);
            writer.ldelim();
        }
                {{- else}}
                {{$pbType := getPBType .ValueType}}
            if (message.{{.FieldName}} != null && Object.hasOwnProperty.call(message, "{{.FieldName}}"))
                writer.uint32(/* id {{add .Index 1}}, wireType {{$wireType}} =*/{{$count}}).{{$pbType}}(message.{{.FieldName}});
                {{- end -}}   
            {{end -}} 
        {{end -}} 

        if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ID);
        if (message.TaskItem != null && message.TaskItem.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.TaskItem.length; ++i)
                writer.uint32(message.TaskItem[i]);
            writer.ldelim();
        }
        if (message.Type != null && Object.hasOwnProperty.call(message, "Type"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Type);
        if (message.VecDrop != null && message.VecDrop.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.VecDrop.length; ++i)
                writer.uint32(message.VecDrop[i]);
            writer.ldelim();
        }
        if (message.VecGain != null && message.VecGain.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.VecGain.length; ++i)
                writer.uint32(message.VecGain[i]);
            writer.ldelim();
        }
        if (message.VecIds != null && message.VecIds.length) {
            writer.uint32(/* id 6, wireType 2 =*/50).fork();
            for (var i = 0; i < message.VecIds.length; ++i)
                writer.uint32(message.VecIds[i]);
            writer.ldelim();
        }
        return writer;
    };

    {{end}}
})();

module.exports = $root;