// DO NOT EDIT!
// This code is auto generated by go-xlsx-exporter
// VERSION 1.2
// go-$protobuf v1.27.1
import UserData from './userdata'
import XXX from './xxx'

export interface Long {
    /** Low bits */
    low: number;

    /** High bits */
    high: number;

    /** Whether unsigned or not */
    unsigned: boolean;
}

export class DataModel {
    private _converted: object;

    protected getConvertData(fieldName: string, value: any): any;
}

/** Namespace  */
export namespace GameData {
    var ALLTYPES: {[key: string]: any};

    
    // Defined in table: 
    enum EMsgType {
        UNKNOWN = 0,
        
        JSON = 1,
        
        XML = 2,
        
    }
    
    
    // Defined in table: data/message.xml
    /** Properties of a MessageWrapper. */
    interface IMessageWrapper {
                        
        id?: (number|null);
             
                        
        data?: (Uint8Array|null);
             
         
    }

    /** Represents a MessageWrapper. */
    class MessageWrapper extends DataModel implements IMessageWrapper {
        static getArrayType(): any;

        /**
         * Constructs a new MessageWrapper.
         * @param [properties] Properties to set
         */
        constructor(properties?: IMessageWrapper);

        
        public id?: (number|null); 
        public data?: (Uint8Array|null);  

        /**
         * Creates a new MessageWrapper instance using the specified properties.
         * @param [properties] Properties to set
         * @returns MessageWrapper instance
         */
        public static create(properties?: MessageWrapper): MessageWrapper;

        /**
         * Encodes the specified MessageWrapper message. Does not implicitly {@link MessageWrapper.verify|verify} messages.
         * @param message MessageWrapper message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: IMessageWrapper, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified MessageWrapper message, length delimited. Does not implicitly {@link MessageWrapper.verify|verify} messages.
         * @param message MessageWrapper message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: IMessageWrapper, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a MessageWrapper message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns MessageWrapper
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): MessageWrapper;

        /**
         * Decodes a MessageWrapper message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns MessageWrapper
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): MessageWrapper;

        /**
         * Verifies a MessageWrapper message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a MessageWrapper message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns MessageWrapper
         */
        public static fromObject(object: { [k: string]: any }): MessageWrapper;

        /**
         * Creates a plain object from a MessageWrapper message. Also converts values to other types if specified.
         * @param message MessageWrapper
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: MessageWrapper, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this MessageWrapper to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }
    
    // Defined in table: data/message.xml
    /** Properties of a Item. */
    interface IItem {
                        
        id?: (number|null);
             
                        
        name?: (string|null);
             
         
    }

    /** Represents a Item. */
    class Item extends DataModel implements IItem {
        static getArrayType(): any;

        /**
         * Constructs a new Item.
         * @param [properties] Properties to set
         */
        constructor(properties?: IItem);

        
        public id?: (number|null); 
        public name?: (string|null);  

        /**
         * Creates a new Item instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Item instance
         */
        public static create(properties?: Item): Item;

        /**
         * Encodes the specified Item message. Does not implicitly {@link Item.verify|verify} messages.
         * @param message Item message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: IItem, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Item message, length delimited. Does not implicitly {@link Item.verify|verify} messages.
         * @param message Item message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: IItem, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Item message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Item;

        /**
         * Decodes a Item message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Item;

        /**
         * Verifies a Item message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Item message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Item
         */
        public static fromObject(object: { [k: string]: any }): Item;

        /**
         * Creates a plain object from a Item message. Also converts values to other types if specified.
         * @param message Item
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: Item, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Item to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }
    
    // Defined in table: data/message.xml
    /** Properties of a C2S_GetPlayerInfo. */
    interface IC2S_GetPlayerInfo {
                        
        name?: (string|null);
             
         
    }

    /** Represents a C2S_GetPlayerInfo. */
    class C2S_GetPlayerInfo extends DataModel implements IC2S_GetPlayerInfo {
        static getArrayType(): any;

        /**
         * Constructs a new C2S_GetPlayerInfo.
         * @param [properties] Properties to set
         */
        constructor(properties?: IC2S_GetPlayerInfo);

        
        public name?: (string|null);  

        /**
         * Creates a new C2S_GetPlayerInfo instance using the specified properties.
         * @param [properties] Properties to set
         * @returns C2S_GetPlayerInfo instance
         */
        public static create(properties?: C2S_GetPlayerInfo): C2S_GetPlayerInfo;

        /**
         * Encodes the specified C2S_GetPlayerInfo message. Does not implicitly {@link C2S_GetPlayerInfo.verify|verify} messages.
         * @param message C2S_GetPlayerInfo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: IC2S_GetPlayerInfo, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified C2S_GetPlayerInfo message, length delimited. Does not implicitly {@link C2S_GetPlayerInfo.verify|verify} messages.
         * @param message C2S_GetPlayerInfo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: IC2S_GetPlayerInfo, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a C2S_GetPlayerInfo message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns C2S_GetPlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): C2S_GetPlayerInfo;

        /**
         * Decodes a C2S_GetPlayerInfo message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns C2S_GetPlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): C2S_GetPlayerInfo;

        /**
         * Verifies a C2S_GetPlayerInfo message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a C2S_GetPlayerInfo message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns C2S_GetPlayerInfo
         */
        public static fromObject(object: { [k: string]: any }): C2S_GetPlayerInfo;

        /**
         * Creates a plain object from a C2S_GetPlayerInfo message. Also converts values to other types if specified.
         * @param message C2S_GetPlayerInfo
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: C2S_GetPlayerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this C2S_GetPlayerInfo to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }
    
    // Defined in table: data/message.xml
    /** Properties of a S2C_GetPlayerInfo. */
    interface IS2C_GetPlayerInfo {
                        
        name?: (string|null);
             
                        
        type?: (EMsgType|null);
             
                        
        items?: (Item[]|null);
             
         
    }

    /** Represents a S2C_GetPlayerInfo. */
    class S2C_GetPlayerInfo extends DataModel implements IS2C_GetPlayerInfo {
        static getArrayType(): any;

        /**
         * Constructs a new S2C_GetPlayerInfo.
         * @param [properties] Properties to set
         */
        constructor(properties?: IS2C_GetPlayerInfo);

        
        public name?: (string|null); 
        public type?: (EMsgType|null); 
        public items?: (Item[]|null);  

        /**
         * Creates a new S2C_GetPlayerInfo instance using the specified properties.
         * @param [properties] Properties to set
         * @returns S2C_GetPlayerInfo instance
         */
        public static create(properties?: S2C_GetPlayerInfo): S2C_GetPlayerInfo;

        /**
         * Encodes the specified S2C_GetPlayerInfo message. Does not implicitly {@link S2C_GetPlayerInfo.verify|verify} messages.
         * @param message S2C_GetPlayerInfo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: IS2C_GetPlayerInfo, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified S2C_GetPlayerInfo message, length delimited. Does not implicitly {@link S2C_GetPlayerInfo.verify|verify} messages.
         * @param message S2C_GetPlayerInfo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: IS2C_GetPlayerInfo, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a S2C_GetPlayerInfo message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns S2C_GetPlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): S2C_GetPlayerInfo;

        /**
         * Decodes a S2C_GetPlayerInfo message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns S2C_GetPlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): S2C_GetPlayerInfo;

        /**
         * Verifies a S2C_GetPlayerInfo message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a S2C_GetPlayerInfo message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns S2C_GetPlayerInfo
         */
        public static fromObject(object: { [k: string]: any }): S2C_GetPlayerInfo;

        /**
         * Creates a plain object from a S2C_GetPlayerInfo message. Also converts values to other types if specified.
         * @param message S2C_GetPlayerInfo
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: S2C_GetPlayerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this S2C_GetPlayerInfo to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    } 
}